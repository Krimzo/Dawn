func main()
{
	var_test()
	branch_test()
	loop_test()
	throw_test()
	lambda_test()
	enum_test()
	struct_test()
	array_test()
	cmplx_str_test()
	print("Done.")
}

func assert(bool& check, string& msg)
{
	if !check {
		throw msg
	}
}

func var_test()
{
	int a = 2
	int? b = (
		a + 1 * 2
	)
	int& c = b
	c *= 2

	assert(a == 2, "a is bad")
	assert(b == 8, "b is bad")
}

func branch_test()
{
	int a = -2
	if a < 0 {
		print(a, " is negative")
	}
	elif a > 0 {
		print(a, " is positive")
	}
	else {
		print(a, " is zero")
	}

	switch a {
		case 0, 1 {
			print("first case")
		}
		case 5 {
			print("second case")
		}
		default {
			print("default case")
		}
	}
}

func loop_test()
{
	int? counter = 0
	loop {
		if counter == 2 {
			counter += 1
			continue
		}
		if counter >= 4 {
			break
		}
		print(counter)
		counter += 1
	}

	counter = 0
	while counter < 4 {
		if counter == 2 {
			counter += 1
			continue
		}
		print(counter)
		counter += 1
	}

	for i : 0>>4 {
		print(i)
	}
	for i : "nice" {
		print(i)
	}
	for i : [1, 2, 3] {
		print(i)
	}
}

func throw_test()
{
	int? a = 5
	try {
		throw a
	}
	catch err {
		err += 2
	}
	assert(a == 7, "throw is bad")
}

func lambda_test()
{
	int c = 12
	function sum = `int a, int b`{
		return a + b + c
	}
	assert(sum(4, 3) == 19, "lambda is bad")
}

enum SomeEnum
{
	one = 1
	two = [2, 2.0, "two"]
	four = "four"
}

func enum_test()
{
	SomeEnum first_val = SomeEnum::two
	print(first_val.name)
	print(first_val.value[2][1])
	assert(SomeEnum::two.id == SomeEnum::two.id, "bad enum comparsion 1")
	assert(SomeEnum::one.id != SomeEnum::two.id, "bad enum comparsion 2")
}

struct SomeStruct
{
	name : string
	age : int

	func who()
	{
		print(self)
	}

	cast string
	{
		return "SomeStruct: {self.name} is {self.age} years old"
	}
}

oper +(SomeStruct& left, int right)
{
	left.age += right
	return left
}

func struct_test()
{
	SomeStruct some_val1 = SomeStruct("nobody", 7)
	SomeStruct? some_val2 = SomeStruct{ name =
		"really "
		+
		"cool", age =
		2 }

	some_val1.who()
	assert(string(some_val2 + some_val1.age) == string(some_val2), "structs are bad")
}

func array_test()
{
	array? data = []
	data += [ int[2] + float[2 + 1] ]
	data += [SomeStruct[2]]

	data[data.count - 1][1].age = 17
	print(data)

	string str_val = string( data[data.count - 1][1] )
	print( str_val )
}

func cmplx_str_test()
{
	int a = 2
	int b = 15
	assert("{a} + {b} = {a + b}" == "2 + 15 = 17", "bad complex strings")
}
