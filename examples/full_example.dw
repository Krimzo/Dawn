// Module
module full_example;

// Primitive
func primitive_examp() {
	// Integer
	let i: int = -10; // [-9223372036854775808, 9223372036854775807]

	// Float
	let f: float = 6.0; // [2.2250738585072014E-308, 1.7976931348623158E+308]

	// Text
	let t0: char = 'd';
	let t1: string = "nice";

	// Bool
	let b0: bool = false;
	let b1: bool = !b0 && i >= 0;
}

// Variable
let a = 16;
var b: float = 23.0;

func var_examp() {
	let a = 5;                // implicit type, constant, int, 5
	var b: int = 6;           // explicit type, variable, int, 6
	let c: int var& = &b;     // explicit type, constant, int variable reference, address from b
	let d: float = float(c);  // explicit type, constant, float, casted value from referenced int
	var e: float let& = null; // explicit type, variable, float constant reference, null
}

// Array
func array_examp() {
	let data0: int[] = int[10];			// init array, 10 elements, values 0
	let data1: int[] = int[5; 17];		// init array,  5 elements, values 17
	let data2: int[] = int[?; 4, 5, 6]; // init array,  3 elements, values [4, 5, 6]
}

// Bracket
func bracket_examp() {
	//T{};            // struct init
	//T(value);       // cast to T
	//t();            // function call
	//T[];            // array type
	//<< yield 0; >>; // yield scope
}

// Function
func func_examp(a: int): int {
	return a * a;
}

// Operator
oper *(left: string, right: int): string {
	return left->repeat(right);
}

// Logic
func logic_examp() {
	let a = (5 + 1.0) * 2.;
	if a < 10.0 {
		print("res = " + string(a));
	}
	elif a <= 15.0 {
		print("it's less or equal to 15");
	}
	else {
		print("it's more than 15");
	}
}

// Switch
func switch_examp() {
	let value = 16;
	switch value {
		case 3 {
			print("it's 3");
		}
		case 14 {
			print("it's 14");
		}
		default {
			print("it's something that im not aware of");
		}
	}
}

// For
func for_examp() {
	for i: ~5 {
		print(i);
	}
	for i: 3~6 {
		print(i);
	}
	for value: int[5; 10] {
		print(value);
	}
}

// While
func while_examp() {
	var counter = 0;
	while counter < 10 {
		if counter == 6 {
			break;
		}
		counter += 1;
	}
}

// Loop
func loop_examp() {
	loop {
		print("One loop run");
		break;
	}
}

// Enum
enum ExampleEnum: float {
	ME(0.0);
	YOU(1.1);
	THEM(2.2);
}

func enum_examp() {
	let someone = ExampleEnum:ME;
	let someone_else: ExampleEnumm = ExampleEnum:THEM;
	let value: float = someone->value;
}

// Layer
layer Living {
	let get_age(): int;
}

// Struct
struct Person: Living {
	name: string;
	age: int;

	impl get_age(): int {
		return self->age;
	}

	var var_method(): Person var& {
		return self;
	}

	let let_method(): Person let& {
		return self;
	}

	let who(): string {
		return self->name;
	}
}

func struct_examp() {
	let person0 = Person{};
	var person1: Person = Person{ name: "Krim", age: 23 };
	
	var living: Living[] = Living[0];
	living->push(person0);
	living->push(person1);

	for alive: living {
		let age = alive->get_age();
		print(age);
	}
}
